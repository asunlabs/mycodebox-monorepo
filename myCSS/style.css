body { 
    transition: all 1s ease-in-out;
}

ol li {
    color: red;
}

/* selector is very important in CSS since it decides in what element
a style should be applied. CSS selector's priority : descending order

- tag selector : select every tags in HTML : e.g. html, body, li, span ...
- id selector : select a tag that has the chosen id e.g #header, #footer
- class selector : select every tags that have the chosen class name : e.g .slider .name
 
parent>child selector in CSS. 
In emmet, it is like : ol>li*3 (ol: parent, li: child)
*/
.pet>li { 
    color: blue;
}

a {
    margin:0 10px;
}

/* peuso selector: applied by context */
a:link {
    color: black;
}

a:visited { 
    color: blueviolet;
}

a:active { 
    color: green;
}

a:hover { 
    color: lightcoral;
}

/* Use tab key in browser to check focus state */
input:focus {
    background-color: black;
    color: white;
}

/* inheritance in CSS : used to increase code productivity.
it may differ if inheritance could be applied by property
*/
#inherit {
    color: deepskyblue;
}

/* give id attr in HTML to select one thing in group */
#selected-list { 
    color: black;
}

 /* cascading priority in CSS
 1. style attribute  > 2. id selector  >  3.class selector > 4. tag selector
 (most detailed)     (somewhat detailed)     (detailed)          (general) 
  => add "!important" keyword to increase priority to the first. 
 */
 /* ===== tag selector ===== */
li { 
     color: powderblue;
 }

 /* ===== id selector ===== */
 #idSelector {
     color:green !important; 
 }

 /* ===== class selector ===== */
 .classSelector { 
     color: blueviolet;
 }

 /* Font size(unit) in CSS : 1) px 2) em 3) rem (modern standard) 
  px => fixed font size
  em : current font size
  rem : root element's font size
  *em, rem => font size changes depending on browser setting 
 */

 #px { 
     font-size: 16px;
 }

 /* refer to image in reference folder 
 changing font size in web == changing HTML tag font size
 rem => proportional to the HTML tag font

 e.g if HTML tag font size : 24px && below #rem font size : 2rem 
 => #rem font size = 24px * 2 = 48px 
 */
 #rem { 
     font-size: 1rem;
 }

 /* color unit in CSS : 1) rgb 2) name 3) hex code */
 #black { 
     color: rgb(0, 0, 0);
 }

 #powderblue { 
     color: powderblue;
 }

 /* hexadecimal colors */
 #hex {
     color: #445681;
 }

 .text-center { 
     text-align: center;
     border: 1px solid #222;
     
     /* font-family : fonts in order of preference, serif/monospaced/variable-width font */
     font-family: 'Courier New', Courier,  monospace;
     font-weight: bold;
     line-height: 2;
 }

 .text-justify { 
     margin-top: 1rem;
     text-align: justify;
     border:1px solid #222;
 }

 .text-justify>h2 { 
     text-align: center;
 }

 .h2Block {
     border: 2px solid palevioletred;
 }

 .spanInline {
     border: 2px solid powderblue; 
 }

 .pBorder {
     border: 2px solid orange;
 }

 .pPadding {
    border: 2px solid orange;
    padding: 20px;
 }

 .pMargin {
     border: 2px solid orange;
     margin: 20px;
 }



 /* setting width == setting content's width 
     (box-sizing's default : content-box; )
    
     if a content has margin/padding/border set, measuring the content's size
    becomes somewhat difficult. Thus box-sizing property has become important
    box-sizing:border-box is more convenient to align each element that has 
    different box properties. 
  */
 #small {
     border: 10px solid tomato;
     /* margin: 10px; */
     padding: 30px;
     width: 200px;
 }

 #big { 
     border: 10px solid lightblue;
     width: 200px;
 }

 #small-bb {
    border: 10px solid tomato;
    padding: 30px;
    width: 200px;
    box-sizing: border-box;
 }

 #big-bb {
    border: 10px solid lightblue;
    width: 200px;
    box-sizing: border-box;
 }

 .h1Margin-up, 
 .h1Margin-down {
     border:5px solid tomato;
     margin: 50px;
 }

.borderline { 
    display: block;
    text-align: center;
}

 #parent { 
     /* border: 5px solid tomato; */
     margin-top: 100px;
 }

 #child { 
     margin-top: 50px;
     background-color: powderblue;
 }

 #container-position {
     border: 0.5rem solid #222;
 }

 #other,
 #parent-position,
 #me {
     border: 0.2rem solid powderblue;

     /* 0.2rem: 3.2px, 1rem: 16px*/
     /* #other ~ #parent-position's margin becomes 1rem, not 0.2rem 
     since below #parent-position's margin-top is 1rem(margin-collapsing)

     parent margin > child margin => parent margin 
     child margin > parent margin => child margin 

     */
     margin: 0.2rem; 
 }

 #parent-position {
     margin-top: 1rem;
 }

 #me { 
     /* position : static(default) */
     position: relative;
     left: 5rem; /* top, right, bottom, left : offset value */
     top: 5rem;
 }

 #container-position-second { 
     border: 2px solid black;
     position: relative;
 }

 #parent-position-rel {
     position: relative;
 }

 #me-abs {
     background-color: tomato;
     /* 
        1) search any parent element with relative position 
        2) if not exists, set body as offset point. 
        3) link between parent<->child disappears. 
     */
     position: absolute;
     top: 10px;
 }



 #fixed-parent {
     position: relative;
     height: 100px;
 }

 #fixed { 
     color:white;
     background-color: #222;
     position: fixed;
     top: 0;
     width: 100%;
     height: 1rem;
     margin-top: 1rem;
     display: flex;
     justify-content: center;
     align-items: center;
 }

.bookshelf {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    height: 300px;
    background-color: turquoise;
    color:white;
    font-weight: bolder;
    font-size: 3rem;
    text-align: center;
}

.book  {
    background-color: tomato;
    border: 1px solid powderblue;
}

.book:nth-child(3) {
    flex-grow: 2;

    /* flex-basis : set the inital main size of a flex item.
    follow flex container's direction, set the width/height. */
    flex-basis: 200px;
}

#img-float { 
    float: left;
    margin: 1rem;
    /* giving a shadow effect in CSS : box-shadow
    offset-x | offset-y | blur-radius | color */
    box-shadow:8px 8px 10px #222;
}

#img-float:hover { 
    transform: translateY(-0.5rem);
}

/* #img-float p:nth-child(2) { 
    clear: both;
} */

/*   */

/*  media query in CSS : essential of a responsive design  
exercise conditions : 
0) screen size over than 1000px -> brown
1) screen size over than 700px -> background color : red
2) screen size less than 600px -> blue
3) screen size between 600px~700px -> green
- note that latter CSS rules apply first based on cascading priority
*/

@media (min-width:701px) { 
    body { 
        background: rgb(224, 240, 205);
    }
}

@media (min-width:1001px) {
    body { 
        background: rgb(219, 163, 163);
    }
}

@media (max-width:700px) { 
    body { 
        background: rgb(164, 192, 235);
    }
}

@media (max-width:600px) { 
    body { 
        background: rgb(199, 112, 192);
    }
}

/* multi column in CSS : separating contents into a few columns
for increasing readability */
#multi-column { 
    /* adjust column number and width with column-count and column-width property */
    column-count: 4;
    column-width: 200px;
    column-gap: 50px;
    column-rule-style: dashed;
    text-align: justify;
}

#column-title { 
    /* column-span make the text penetrate all the columns horizontally */
    column-span: all;
    font-size: 3rem;
    font-weight: bolder;
    text-align: center;
    margin: 1rem;
}

#background-logo { 
    height: 1100px;
    /* Use .png format when an image is mixed with background color */
    background-image: url("reference/logo-fixed.png");
    /* image repetition : 1) repeat-x 2) repeat-y 3) no-repeat  */
    background-repeat: no-repeat;
    /* background-attachement: fixed(img will move along scroll) / scroll(default) */
    background-attachment: scroll;
    /* background-size : contain/cover
    contain : over-sized image will not be cut from screen(margin happens)
    cover : image will be fit into screen (over-sized image will be cut) 
    */
    /* background-size: cover; */
    /* background-position : moves bg image */
    background-position: right;

    /* short expression for all above
    background : (color) (image url) (repetition) (attachment) (position)
    background : #eee url(./myImage.png) no-repeat fixed center
    */
}

.filter-img img {
    filter: grayscale(100%) blur(0.3rem);
    transition: all 0.5s;
}

.filter-img img:hover { 
    filter:grayscale(0%) blur(0rem); 
}

.filter-h { 
    filter: blur(3px);
}

#transform > h1 { 
    background-color: deepskyblue;
    color: white;
    font-size: 3rem;
    display: inline-block;
    /* types of supported transforms in CSS
    - translate : move X,Y axis
    - scale : expand X,Y axis
    - rotate : rotate 0 degree ~ 360 degree
    
    */
    /* transform : scaleX(1) scaleY(2); => this is the same expression as below */
    /* transform: scale(1, 2); */
    transition: all 2s;
}

#transform:hover { 
    transform: scale(1.5);
}

#button-transition {
    font-size: 3rem;
    display: block;
    /* 
    transition effect has four elements : 
        1) property(subject) 
        2) duration 
        3) delay
        4) timing-function

        transition-property:all => apply to all changed properties
        transition-property:transform => apply to transform properties
        transition-property:transform font-size => apply to transform and
        font-size property.
    */
    transition-property: all; 
    transition-duration: 0.5s;
    transition-delay: 1s;
}

/* do not give a space between pseudo class and selector in CSS.
For example, 
    #button-transition :active => won't work
    #button-transition:active => will work
*/
#button-transition:active { 
    transform: translate(20px, 20px);
    /* if transition-property is 'all', button will be moved and at the same
    time font size will be decreased. */
    font-size: small;
}

.height {
    background-color: deepskyblue;
    color: #eee;
    width: 200px;
    height: 200px;
    /* transition : property duration delay timing-function */
    /* transition : height 1s 0.1s ease-in-out; 
       cubic-bezier => custom transition effect
    */
    transition: height 500ms cubic-bezier(0.680, -0.550, 0.265, 1.550);
}

.height:hover { 
    height: 500px; 
}