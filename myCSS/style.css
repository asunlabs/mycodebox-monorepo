ol li {
    color: red;
}

/* selector is very important in CSS since it decides in what element
a style should be applied. CSS selector's priority : descending order

- tag selector : select every tags in HTML : e.g. html, body, li, span ...
- id selector : select a tag that has the chosen id e.g #header, #footer
- class selector : select every tags that have the chosen class name : e.g .slider .name
 
parent>child selector in CSS. 
In emmet, it is like : ol>li*3 (ol: parent, li: child)
*/
.pet>li { 
    color: blue;
}

a {
    margin:0 10px;
}

/* peuso selector: applied by context */
a:link {
    color: black;
}

a:visited { 
    color: blueviolet;
}

a:active { 
    color: green;
}

a:hover { 
    color: lightcoral;
}

/* Use tab key in browser to check focus state */
input:focus {
    background-color: black;
    color: white;
}

/* inheritance in CSS : used to increase code productivity.
it may differ if inheritance could be applied by property
*/
#inherit {
    color: deepskyblue;
}

/* give id attr in HTML to select one thing in group */
#selected-list { 
    color: black;
}

 /* cascading priority in CSS
 1. style attribute  > 2. id selector  >  3.class selector > 4. tag selector
 (most detailed)     (somewhat detailed)     (detailed)          (general) 
  => add "!important" keyword to increase priority to the first. 
 */
 /* ===== tag selector ===== */
li { 
     color: powderblue;
 }

 /* ===== id selector ===== */
 #idSelector {
     color:green !important; 
 }

 /* ===== class selector ===== */
 .classSelector { 
     color: blueviolet;
 }

 /* Font size(unit) in CSS : 1) px 2) em 3) rem (modern standard) 
  px => fixed font size
  em : current font size
  rem : root element's font size
  *em, rem => font size changes depending on browser setting 
 */

 #px { 
     font-size: 16px;
 }

 /* refer to image in reference folder 
 changing font size in web == changing HTML tag font size
 rem => proportional to the HTML tag font

 e.g if HTML tag font size : 24px && below #rem font size : 2rem 
 => #rem font size = 24px * 2 = 48px 
 */
 #rem { 
     font-size: 1rem;
 }

 /* color unit in CSS : 1) rgb 2) name 3) hex code */
 #black { 
     color: rgb(0, 0, 0);
 }

 #powderblue { 
     color: powderblue;
 }

 /* hexadecimal colors */
 #hex {
     color: #445681;
 }

 .text-center { 
     text-align: center;
     border: 1px solid #222;
     
     /* font-family : fonts in order of preference, serif/monospaced/variable-width font */
     font-family: 'Courier New', Courier,  monospace;
     font-weight: bold;
     line-height: 2;
 }

 .text-justify { 
     margin-top: 1rem;
     text-align: justify;
     border:1px solid #222;
 }

 .text-justify>h2 { 
     text-align: center;
 }

 .h2Block {
     border: 2px solid palevioletred;
 }

 .spanInline {
     border: 2px solid powderblue; 
 }

 .pBorder {
     border: 2px solid orange;
 }

 .pPadding {
    border: 2px solid orange;
    padding: 20px;
 }

 .pMargin {
     border: 2px solid orange;
     margin: 20px;
 }



 /* setting width == setting content's width 
     (box-sizing's default : content-box; )
    
     if a content has margin/padding/border set, measuring the content's size
    becomes somewhat difficult. Thus box-sizing property has become important
    box-sizing:border-box is more convenient to align each element that has 
    different box properties. 
  */
 #small {
     border: 10px solid tomato;
     /* margin: 10px; */
     padding: 30px;
     width: 200px;
 }

 #big { 
     border: 10px solid lightblue;
     width: 200px;
 }

 #small-bb {
    border: 10px solid tomato;
    padding: 30px;
    width: 200px;
    box-sizing: border-box;
 }

 #big-bb {
    border: 10px solid lightblue;
    width: 200px;
    box-sizing: border-box;
 }

 .h1Margin-up, 
 .h1Margin-down {
     border:5px solid tomato;
     margin: 50px;
 }

.borderline { 
    display: block;
    text-align: center;
}

 #parent { 
     /* border: 5px solid tomato; */
     margin-top: 100px;
 }

 #child { 
     margin-top: 50px;
     background-color: powderblue;
 }

 #container-position {
     border: 0.5rem solid #222;
 }

 #other,
 #parent-position,
 #me {
     border: 0.2rem solid powderblue;

     /* 0.2rem: 3.2px, 1rem: 16px*/
     /* #other ~ #parent-position's margin becomes 1rem, not 0.2rem 
     since below #parent-position's margin-top is 1rem(margin-collapsing)

     parent margin > child margin => parent margin 
     child margin > parent margin => child margin 

     */
     margin: 0.2rem; 
 }

 #parent-position {
     margin-top: 1rem;
 }

 #me { 
     /* position : static(default) */
     position: relative;
     left: 5rem; /* top, right, bottom, left : offset value */
     top: 5rem;
 }

 #container-position-second { 
     border: 2px solid black;
     position: relative;
 }

 #parent-position-rel {
     position: relative;
 }

 #me-abs {
     background-color: tomato;
     /* 
        1) search any parent element with relative position 
        2) if not exists, set body as offset point. 
        3) link between parent<->child disappears. 
     */
     position: absolute;
     top: 10px;
 }