@import url('https://fonts.googleapis.com/css2?family=Italianno&family=Pacifico&display=swap');

/* standard CSS grammar: selector { declaration } */
h1 {
    color: red;
    font-size: 40px;
    font-family: 'Times New Roman', Times, serif;
}

#novel-titles,
.kitten,
h2 {
    color: blue;
}

/* parent > children : > css selector only selects parent's children */
.first>h1 {
    color: green;
}

.semantic-p>p {
    color: green;
    text-align: center;

    /* line-height property sets a line spacing */
    line-height: 200%;

    font-size: 40px;

    /* font-weight property sets how thick a font is */
    font-weight: 400;

    /* font-family property sets family-name and generic-name(serif, san-serif) 
    generic-name selects a font to use if fonts in family-name are not available */
    /* font-family: 'Times New Roman', Times, serif; */

    /* importing web fonts : 1) HTML link tag 2) @import in CSS */
    font-family: 'Italianno', cursive;
}

.semantic-p-second {
    font-size: 30px;
    font-family: 'Pacifico', cursive;
}

/* link states in CSS
link: default 
hover: on mouse 
active: mouse click 
visited: link visited
focus: link focused
*/
a {
    text-decoration: none;
    background-color: black;
    color: white;
}

a:hover {
    background-color: green;
}

.list-without-symbol {
    /* list-style property sets how a list should be placed  */
    /* list-style: none; */
    list-style: upper-latin;
}

body {
    background-color: aliceblue;
    background-image: url("./assets/img/2.jpg");

    /* cover is often used for background-size property. It scales the image 
    as large as possible. Image will be stretched if needed */
    background-size: cover;
    background-repeat: no-repeat;
}

.margin {
    width: 100px;
    height: 100px;
    background-color: bisque;

    /* padding : inner margin 
    margin : outer margin */
    padding: 20px;
    margin: 20px;

    /* border property sets a edge size, style, and color
    edge style available:solid, double, dashed  */
    border: 10px dashed black;
    /* border-radius: 20px;*/

    border-top-right-radius: 10px;
    border-bottom-left-radius: 10px;
}

.box1,
.box2,
.box3 {
    width: 150px;
    height: 50px;
    background-color: yellow;

    /* Set box size as a standard when calculating whole element size */
    box-sizing: border-box;
}

.box2 {
    border: 10px solid blue;
}

.box3 {
    padding: 20px;
}

/* display attribute in CSS is : 1) block 2) in-line */
.display {
    width: 100px;
    height: 100px;
    border: 2px solid black;
    background-color: lightblue;

    /* inline: only takes a place as itself
    block: takes a whole horizontal space */
    display: inline;
}

/* position attribute in CSS is 1) static(default) 2) fixed 3) absolute 4) relative 
these attributes can be used keywords like top, left, right, bottom */
.fixed-menu {
    position: fixed;
    width: 100%;
    height: 50px;
    background-color: white;
    top: 0;
    left: 0;
}

/* position: relative - the element now can be moved to 1) left 2) right 3) top 4) bottom. 
HTML elements are stacked in order of : left to right, top to bottom in default. 
*/
.relative-menu {
    position: relative;
    width: 20px;
    height: 100px;
    background-color: aquamarine;
    top: 50px;
    left: 400px;
}

/* position: absolute
search parent element that has a relative position and set it a starting point.
if no parent element has a relative position, it sets a body as a starting point  */
.absolute-menu {
    position: absolute;
    width: 100%;
    height: 55px;
    background-color: aqua;
    top: 80px;
    left: 0;
}

/* flex is the one of the core functionalities in CSS for layout 
Usually a container, items, and display(flex) are used to implement flex box
Note that container property and item property are divided

e.g. display : flex -> container property

axis : 1) main(items) 2) cross(vertical to main) 
*/

.container {
    /* set display property as 'flex' to use flex box */
    display: flex;

    /* viewport: virtual page that is used to adjust whole page's magnification 
    vh: viewport height
    vw: viewport width */

    height: 100vh;

    /* flex-direction property set a main axis in flex box */
    flex-direction: row;

    /* flex-wrap property does a line space when flex box items are
    bigger than flex box container */
    flex-wrap: wrap;

    /* flex-flow property are the sum of the direction and wrap */

    /* justify-content sets a main axis' item alignment direction */
    justify-content: center;

    /* align-item sets a cross axis' item alignment row direction. Note that
    setting container's height is required to use this align-item property */
    align-items: center;

    /* align-content sets a cross axis' item alignment column direction */
    /* align-content: flex-start; */
}


/* .item{
    /* flex-basis property sets a flex-item's size depending on main axis
    if main axis (row) -> set width size
    if main axis(column) -> set height size */
/* flex-basis: 300px;
    flex-grow: 1;
    flex-shrink: 0; */

/* } */

#box1 {
    /* flex-grow property tells the flex box items that how much left space 
    they can additionally take 
    flex-shrink property sets a limitation that how much space the flex box
    items should keep. It adds a horizontal scroll bar when set 0. */
    /* flex-grow:1;  */
    background-color: blueviolet;

    /* align-self property sets the oneself's cross axis alignment */
    align-self: flex-start;

    /* order property changes the items' order  */
    order: 3;
}

#box2 {
    /* flex-grow:2;  */
    background-color: goldenrod;
    align-self: stretch;
    order: 2;
}

#box3 {
    /* flex-grow:3; */
    background-color: brown;
    align-self: flex-end;
    order: 1;
}

/* grid in CSS: set display property as grid
grid - 1) container property 2) item property */
.grid-container {
    display: grid;
    text-align: center;

    /* grid-template-row(column) sets a row(column) size. Use fraction to divide
    based on ratio, not the numbers. 
    repeat function in CSS: repeating as specified (number of repetition, unit) 
    minmax function in CSS: defining a size range - (minimum, maximum) */
    /* grid-template-rows: repeat(auto-fit, minmax(200px, 100)); */
    grid-template-rows: repeat(3, 100px);
    grid-auto-rows: 100px;
    grid-template-columns: repeat(3,100px);
    /* grid-template-columns: repeat(2, minmax(200px, 1fr)); */

    /* gap property sets a margin between each grid item */
    /* gap: 10px 50px; */

    /* justify-items: center;
    align-items: center;
     */

    /* set container's height value for verical alignment */
    height: 100vh;

    justify-content: center;
    align-content: center;
}

.grid-item2{
    /* grid-column-start: 2;
    grid-column-end: 4;

    grid-row-start: 1;
    grid-row-end: 4; */
    order: -1;
}